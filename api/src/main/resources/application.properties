# quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.hibernate-orm.database.generation=update
# drop-and-create
# OIDC Configuration
quarkus.oidc.auth-server-url=http://localhost:8888/realms/quarkus
quarkus.oidc.client-id=backend-service
quarkus.oidc.credentials.secret=secret
quarkus.oidc.tls.verification=none
# Enable Policy Enforcement
# quarkus.keycloak.policy-enforcer.enable=true
# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes
quarkus.keycloak.devservices.realm-path=quarkus-realm.json
# Token exchange
quarkus.rest-client."de.mymiggi.movie.api.service.ExchangeService".url=${quarkus.oidc.auth-server-url}
quarkus.rest-client."de.mymiggi.movie.api.service.ExchangeService".scope=javax.inject.Singleton
oauth2.redirect-url=http://localhost:3000/auth
# My config
default-page.size=30
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:3000
quarkus.smallrye-openapi.path=/movie-archive/openapi
quarkus.banner.path=banner.txt
# Deployment
quarkus.container-image.name=movie-api
quarkus.container-image.group=miggi
quarkus.container-image.registry=gitea.familyhainz.de
quarkus.container-image.build=true